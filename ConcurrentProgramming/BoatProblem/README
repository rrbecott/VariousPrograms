// -----------------------------------------------------------
// NAME : Ryan Becotte                       User ID: rrbecott
// DUE DATE : 12/04/2020
// PROGRAM ASSIGNMENT #5
// FILE NAME : README
// PROGRAM PURPOSE :
//    README for the cannibal-missionary river crossing problem
// -----------------------------------------------------------

Question 1:
When the boat is ready, it checks if a safe combination of cannibals and
missionaries is available. If there is not a safe combination, the boat waits
for a safe combination. Every person that tries to ride the boat signals the
boat to see if there is now a safe combination. If there is a safe
combination, the boat loads on three passengers and returns and releases
the passengers that were on board.

Question 2:
My program works because the use of monitors succesfully solves the critical
section problem. Only one thread is allowed to execute in the boat monitor,
making sure that everything in the boat monitor is only accessed by one
thread at a time.

Question 3:
Condition onTrip - Passengers on the boat wait on onTrip and are signaled
in BoatDone to simulate being on the boat trip.
Condition safeLoads - If there are no safe combinations, the boat will wait
on safeLoads and will be signaled by a passenger if a safe load is available
Condition Cannibals - cannibals waiting for the boat will wait on Cannibals
and will be signaled in BoatReady when loading passengers
Condition Missionaries - missionaries waiting for the boat will wait on
Missionaries and will be signaled in BoatReady when loading passengers
int waitingCan - The number of cannibals waiting for the boat, initialized
to 0. waitingCan is increased when a cannibal waits for the boat and is
decreased when a cannibal rides the boat and gets off the boat.
int waitingMis - The number of missionaries waiting for the boat, initialized
to 0. waitingMis is increased when a missionary waits for the boat and is
decreased when a missionary rides the boat and gets off the boat.

Question 4:
My program only releases the boat thread when a safe load is available, which
is checked by the function SafeLoad. When the boat is released, it releases
three threads to load onto the boat.

Question 5:
If there are at least 3 cannibals and at least 3 missionaries, it will randomly
pick one of the three safe combinations to release
Else if there is at least 1 cannibal and at least 2 missionaries, it will
release two missionaries and one cannibal
Else if there are at least 3 cannibals, it will release 3 cannibals
Else if there are at least 3 missionaries, it will release 3 missionaries
Else there are no safe loads
This way, a safe combination of three threads is always loaded into the boat.

Question 6:
Nobody can get off the boat before it completes because the three threads that
are on the boat wait on the condition onTrip. onTrip is only signaled in
BoatDone, which is when the boat has completed its trip.
While the boat is crossing the river, nobody can get on because the boat thread
loads people onto the boat, and since the boat is busy with crossing the river,
it cannot load or unload people until BoatDone is called.
Everyone who boards the boat is registered in the passengers array. When
cannibal and missionary threads get on the boat, they enter their information
into the array. No other thread can enter their information because the boat
only calls three threads to be released from their queues. These three threads
are the only ones who can access the array.
Nobody on the boat can come back and go into their arrive function before the
current boat load completes because the threads in the boat are waiting on
the condition onTrip, which is only signaled when the boat has completed
the trip.

Question 7:
My main function joins on the boat thread, and once the boat thread has made
its final trip, it exits after it returns. Therefore, the program terminates
when b trips are completed.
