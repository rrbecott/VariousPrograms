// -----------------------------------------------------------
// NAME : Ryan Becotte                      User ID: rrbecott
// DUE DATE : 12/11/2020
// PROGRAM ASSIGNMENT #6
// FILE NAME : README
// PROGRAM PURPOSE :
//    README for multithreaded matrix multiplication
// -----------------------------------------------------------

Question 1:
My program creates all row, column, and processor threads and links it so that
their neighbors are the bottom and right processors and they have channels
that go to the top and left processors. The row threads send in each number
in their row to their channel which is picked up by their neighbor. The
column thread send in each number of their column to their channel which
is picked up by their neighbor. The numbers that the processors receive are
mulitplied together and added to a sum. When the processors receive their
last number, the sum is the final value of the corresponding value in
matrix C.

Question 2:
My program works because it correctly uses channels to send and receive data
from two different threads. Each thread is linked to the correct channel and
is synchronous so that the threads must wait on each other in the channel.
This way, values cannot be skipped over.

Question 3:
neighbor variables are pointers to process threads to build channels with.
channel variables are channels that are built between the thread and the
thread it needs to receive from.

Question 4:
Thread P(i,j) repeatedly receives one value from row A(i) and one value from
column B(j), mulitplies them together, and adds the result to a sum. This is
the definition of the dot product.

Question 5:
Asynchronous channels do not wait on another thread, so values could be
skipped over. Suppose thread B needs to receive a value from thread A and
the channel connecting them is asynchronous. If B reaches the call to receive
before A reaches the call to send, B will receive nothing. With a synchronous
channel, B would wait on the receive until it gets sent something from A.

Question 6:
Threads terminate in a diagonal sort of pattern
For example:
(x means cell terminated, o means cell running)

o o o       x o o      x x o      x x x      x x x      x x x
o o o  ->   o o o  ->  x o o  ->  x x o  ->  x x x  ->  x x x
o o o       o o o      o o o      x o o      x x o      x x x


Question 7:
Yes, a thread can receive an EOD and still do things before it terminates.
In my program, when a thread receives an EOD, it copies the sum into array
C and then sends its neighbors the EOD.
